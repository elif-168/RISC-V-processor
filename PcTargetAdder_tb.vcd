$date
	Wed Jan 08 02:52:05 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module PcTargetAdder_tb $end
$var wire 32 ! pcTarget [31:0] $end
$var reg 32 " immVal [31:0] $end
$var reg 32 # pc [31:0] $end
$scope module uut $end
$var wire 32 $ immVal [31:0] $end
$var wire 32 % pc [31:0] $end
$var wire 32 & pcTarget [31:0] $end
$var wire 1 ' cout $end
$scope module adder $end
$var wire 32 ( a [31:0] $end
$var wire 32 ) b [31:0] $end
$var wire 1 * cin $end
$var wire 32 + sum [31:0] $end
$var wire 1 ' cout $end
$var wire 32 , carry [31:0] $end
$scope begin full_adder_gen[0] $end
$scope begin genblk2 $end
$scope module fa $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 * cin $end
$var wire 1 / cout $end
$var wire 1 0 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[1] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 3 cin $end
$var wire 1 4 cout $end
$var wire 1 5 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[2] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 6 a $end
$var wire 1 7 b $end
$var wire 1 8 cin $end
$var wire 1 9 cout $end
$var wire 1 : sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[3] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 ; a $end
$var wire 1 < b $end
$var wire 1 = cin $end
$var wire 1 > cout $end
$var wire 1 ? sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[4] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 @ a $end
$var wire 1 A b $end
$var wire 1 B cin $end
$var wire 1 C cout $end
$var wire 1 D sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[5] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 E a $end
$var wire 1 F b $end
$var wire 1 G cin $end
$var wire 1 H cout $end
$var wire 1 I sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[6] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 J a $end
$var wire 1 K b $end
$var wire 1 L cin $end
$var wire 1 M cout $end
$var wire 1 N sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[7] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 O a $end
$var wire 1 P b $end
$var wire 1 Q cin $end
$var wire 1 R cout $end
$var wire 1 S sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[8] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 T a $end
$var wire 1 U b $end
$var wire 1 V cin $end
$var wire 1 W cout $end
$var wire 1 X sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[9] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 Y a $end
$var wire 1 Z b $end
$var wire 1 [ cin $end
$var wire 1 \ cout $end
$var wire 1 ] sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[10] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 ^ a $end
$var wire 1 _ b $end
$var wire 1 ` cin $end
$var wire 1 a cout $end
$var wire 1 b sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[11] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 c a $end
$var wire 1 d b $end
$var wire 1 e cin $end
$var wire 1 f cout $end
$var wire 1 g sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[12] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 h a $end
$var wire 1 i b $end
$var wire 1 j cin $end
$var wire 1 k cout $end
$var wire 1 l sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[13] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 m a $end
$var wire 1 n b $end
$var wire 1 o cin $end
$var wire 1 p cout $end
$var wire 1 q sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[14] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 r a $end
$var wire 1 s b $end
$var wire 1 t cin $end
$var wire 1 u cout $end
$var wire 1 v sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[15] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 w a $end
$var wire 1 x b $end
$var wire 1 y cin $end
$var wire 1 z cout $end
$var wire 1 { sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[16] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 | a $end
$var wire 1 } b $end
$var wire 1 ~ cin $end
$var wire 1 !" cout $end
$var wire 1 "" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[17] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 #" a $end
$var wire 1 $" b $end
$var wire 1 %" cin $end
$var wire 1 &" cout $end
$var wire 1 '" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[18] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 (" a $end
$var wire 1 )" b $end
$var wire 1 *" cin $end
$var wire 1 +" cout $end
$var wire 1 ," sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[19] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 -" a $end
$var wire 1 ." b $end
$var wire 1 /" cin $end
$var wire 1 0" cout $end
$var wire 1 1" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[20] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 2" a $end
$var wire 1 3" b $end
$var wire 1 4" cin $end
$var wire 1 5" cout $end
$var wire 1 6" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[21] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 7" a $end
$var wire 1 8" b $end
$var wire 1 9" cin $end
$var wire 1 :" cout $end
$var wire 1 ;" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[22] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 <" a $end
$var wire 1 =" b $end
$var wire 1 >" cin $end
$var wire 1 ?" cout $end
$var wire 1 @" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[23] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 A" a $end
$var wire 1 B" b $end
$var wire 1 C" cin $end
$var wire 1 D" cout $end
$var wire 1 E" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[24] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 F" a $end
$var wire 1 G" b $end
$var wire 1 H" cin $end
$var wire 1 I" cout $end
$var wire 1 J" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[25] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 K" a $end
$var wire 1 L" b $end
$var wire 1 M" cin $end
$var wire 1 N" cout $end
$var wire 1 O" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[26] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 P" a $end
$var wire 1 Q" b $end
$var wire 1 R" cin $end
$var wire 1 S" cout $end
$var wire 1 T" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[27] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 U" a $end
$var wire 1 V" b $end
$var wire 1 W" cin $end
$var wire 1 X" cout $end
$var wire 1 Y" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[28] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 Z" a $end
$var wire 1 [" b $end
$var wire 1 \" cin $end
$var wire 1 ]" cout $end
$var wire 1 ^" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[29] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 _" a $end
$var wire 1 `" b $end
$var wire 1 a" cin $end
$var wire 1 b" cout $end
$var wire 1 c" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[30] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 d" a $end
$var wire 1 e" b $end
$var wire 1 f" cin $end
$var wire 1 g" cout $end
$var wire 1 h" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin full_adder_gen[31] $end
$scope begin genblk3 $end
$scope module fa $end
$var wire 1 i" a $end
$var wire 1 j" b $end
$var wire 1 k" cin $end
$var wire 1 l" cout $end
$var wire 1 m" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
1D
0C
0B
0A
1@
0?
0>
0=
0<
0;
1:
09
08
17
06
05
04
03
02
01
00
0/
0.
0-
b0 ,
b10100 +
0*
b100 )
b10000 (
0'
b10100 &
b10000 %
b100 $
b10000 #
b100 "
b10100 !
$end
#10000
1'
1l"
1k"
1g"
1f"
1b"
1a"
1]"
1\"
1X"
1W"
1S"
1R"
1N"
1M"
1I"
1H"
1D"
1C"
1?"
1>"
1:"
19"
15"
14"
10"
1/"
1+"
1*"
1&"
1%"
1!"
1~
1z
1y
1u
1t
1p
1o
1k
1j
1f
1e
1a
1`
1\
1[
b11111111111111111111111100000000 ,
1W
1?
1I
1N
1S
0]
0b
0g
0l
0q
0v
0{
0""
0'"
0,"
01"
06"
0;"
0@"
0E"
0J"
0O"
0T"
0Y"
0^"
0c"
0h"
b11111100 !
b11111100 &
b11111100 +
0m"
1<
1A
1F
1K
1P
1U
1Z
1_
1d
1i
1n
1s
1x
1}
1$"
1)"
1."
13"
18"
1="
1B"
1G"
1L"
1Q"
1V"
1["
1`"
1e"
1j"
0@
1T
b11111111111111111111111111111100 "
b11111111111111111111111111111100 $
b11111111111111111111111111111100 )
b100000000 #
b100000000 %
b100000000 (
#20000
0o
0k
0'
0l"
1l
1m"
0`
0e
0j
0t
0y
0~
0%"
0*"
0/"
04"
09"
0>"
0C"
0H"
0M"
0R"
0W"
0\"
0a"
0f"
0k"
0[
0\
0a
0f
0p
0u
0z
0!"
0&"
0+"
00"
05"
0:"
0?"
0D"
0I"
0N"
0S"
0X"
0]"
0b"
0g"
b0 ,
0W
0:
0?
0D
0I
0N
0S
0]
0b
0g
0q
0v
0{
0""
0'"
0,"
01"
06"
0;"
0@"
0E"
0J"
0O"
0T"
0Y"
0^"
0c"
b10000000000000000001000000000000 !
b10000000000000000001000000000000 &
b10000000000000000001000000000000 +
0h"
07
0<
0A
0F
0K
0P
0U
0Z
0_
0d
0n
0s
0x
0}
0$"
0)"
0."
03"
08"
0="
0B"
0G"
0L"
0Q"
0V"
0["
0`"
0e"
0j"
0T
1i"
b1000000000000 "
b1000000000000 $
b1000000000000 )
b10000000000000000000000000000000 #
b10000000000000000000000000000000 %
b10000000000000000000000000000000 (
#30000
1k"
1g"
1f"
1b"
1a"
1]"
1\"
1X"
1W"
1S"
1R"
1N"
1M"
1I"
1H"
1D"
1C"
1?"
1>"
1:"
19"
15"
14"
10"
1/"
1+"
1*"
1&"
1%"
1!"
1~
1z
1y
1u
1t
1p
1o
1k
0l
1j
1f
1e
1a
1`
1\
1[
1W
1V
1R
1Q
1M
1L
1H
1G
1C
1B
1>
1=
19
18
14
13
b1111111111111111111111111111111 ,
1/
05
0:
0?
0D
0I
0N
0S
0X
0]
0b
0g
0q
0v
0{
0""
0'"
0,"
01"
06"
0;"
0@"
0E"
0J"
0O"
0T"
0Y"
0^"
0c"
0h"
b10000000000000000000000000000000 !
b10000000000000000000000000000000 &
b10000000000000000000000000000000 +
1m"
1.
0i
1-
11
16
1;
1@
1E
1J
1O
1T
1Y
1^
1c
1h
1m
1r
1w
1|
1#"
1("
1-"
12"
17"
1<"
1A"
1F"
1K"
1P"
1U"
1Z"
1_"
1d"
0i"
b1 "
b1 $
b1 )
b1111111111111111111111111111111 #
b1111111111111111111111111111111 %
b1111111111111111111111111111111 (
#40000
15
0'
03
1:
1?
1D
1I
1N
1S
1X
1]
1b
1g
1l
1q
1v
1{
1""
1'"
1,"
11"
16"
1;"
1@"
1E"
1J"
1O"
1T"
1Y"
1^"
1c"
1h"
0l"
0/
08
0=
0B
0G
0L
0Q
0V
0[
0`
0e
0j
0o
0t
0y
0~
0%"
0*"
0/"
04"
09"
0>"
0C"
0H"
0M"
0R"
0W"
0\"
0a"
0f"
0k"
1m"
b11111111111111111111111111111111 !
b11111111111111111111111111111111 &
b11111111111111111111111111111111 +
10
04
09
0>
0C
0H
0M
0R
0W
0\
0a
0f
0k
0p
0u
0z
0!"
0&"
0+"
00"
05"
0:"
0?"
0D"
0I"
0N"
0S"
0X"
0]"
0b"
b0 ,
0g"
12
17
1<
1A
1F
1K
1P
1U
1Z
1_
1d
1i
1n
1s
1x
1}
1$"
1)"
1."
13"
18"
1="
1B"
1G"
1L"
1Q"
1V"
1["
1`"
1e"
1j"
0-
01
06
0;
0@
0E
0J
0O
0T
0Y
0^
0c
0h
0m
0r
0w
0|
0#"
0("
0-"
02"
07"
0<"
0A"
0F"
0K"
0P"
0U"
0Z"
0_"
0d"
b11111111111111111111111111111111 "
b11111111111111111111111111111111 $
b11111111111111111111111111111111 )
b0 #
b0 %
b0 (
#50000
